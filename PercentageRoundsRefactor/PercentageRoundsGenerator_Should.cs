using Xunit;

namespace PercentageRoundsRefactor;

public static class PercentageRoundsGenerator
{
    public static string Generate(double percentage)
    {
        if (percentage == 0)
            return "âšªâšªâšªâšªâšªâšªâšªâšªâšªâšª";
        if (percentage > 0.0 && percentage <= 0.1)
            return "ğŸ”µâšªâšªâšªâšªâšªâšªâšªâšªâšª";
        if (percentage > 0.1 && percentage <= 0.2)
            return "ğŸ”µğŸ”µâšªâšªâšªâšªâšªâšªâšªâšª";
        if (percentage > 0.2 && percentage <= 0.3)
            return "ğŸ”µğŸ”µğŸ”µâšªâšªâšªâšªâšªâšªâšª";
        if (percentage > 0.3 && percentage <= 0.4)
            return "ğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšªâšªâšªâšª";
        if (percentage > 0.4 && percentage <= 0.5)
            return "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšªâšªâšª";
        if (percentage > 0.5 && percentage <= 0.6)
            return "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšªâšª";
        if (percentage > 0.5 && percentage <= 0.7)
            return "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšª";
        if (percentage > 0.6 && percentage <= 0.8)
            return "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšª";
        if (percentage > 0.7 && percentage <= 0.9)
            return "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšª";
        return "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µ";
    }
}

public class PercentageRoundsGeneratorShould

{
    [Theory]
    [InlineData(0, "âšªâšªâšªâšªâšªâšªâšªâšªâšªâšª")]
    [InlineData(0.05, "ğŸ”µâšªâšªâšªâšªâšªâšªâšªâšªâšª")]
    [InlineData(0.1, "ğŸ”µâšªâšªâšªâšªâšªâšªâšªâšªâšª")]
    [InlineData(0.2, "ğŸ”µğŸ”µâšªâšªâšªâšªâšªâšªâšªâšª")]
    [InlineData(0.25, "ğŸ”µğŸ”µğŸ”µâšªâšªâšªâšªâšªâšªâšª")]
    [InlineData(0.3, "ğŸ”µğŸ”µğŸ”µâšªâšªâšªâšªâšªâšªâšª")]
    [InlineData(0.35, "ğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšªâšªâšªâšª")]
    [InlineData(0.4, "ğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšªâšªâšªâšª")]
    [InlineData(0.45, "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšªâšªâšª")]
    [InlineData(0.5, "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšªâšªâšª")]
    [InlineData(0.55, "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšªâšª")]
    [InlineData(0.6, "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšªâšª")]
    [InlineData(0.65, "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšª")]
    [InlineData(0.7, "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšª")]
    [InlineData(0.75, "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšª")]
    [InlineData(0.8, "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšª")]
    [InlineData(0.85, "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšª")]
    [InlineData(0.9, "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšª")]
    [InlineData(0.95, "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µ")]
    [InlineData(1, "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µ")]
    [InlineData(50, "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µ")]
    public void GenerateProperRepresentation(double percentage, string expectedRepresentation)
    {
        var result = PercentageRoundsGenerator.Generate(percentage);
        Assert.Equal(result, expectedRepresentation);
    }

}